@model Cell[,]


@{
    ViewBag.Title = "Game Of Life";
    int Rows = ViewBag.Rows;
    int Columns = ViewBag.Columns;
}


@if (Model != null)
{
    <div class="center-container">
    <div class="loading-overlay" id="loading-overlay">
        <div>LOADING HERE</div>
    </div>
    
    <div class="settings-container">
        <div class="pause-container">
            <button id="pauseButton">pause</button>
        <button id="unPauseButton" class="hidden">Start</button>
        </div>
        <div class="pattern-container">
            <button id="pattern-dot">
                dot
            </button>
            <button id="pattern-glider">
                glider
            </button>
            <button id="pattern-block">
                block   
            </button>
            <button id="pattern-beehive">
                beehive
            </button>
            <button id="pattern-loaf">
                loaf
            </button>
            <button id="pattern-lwss">
                lwss
            </button>
            <button id="pattern-boat">
                boat
            </button>
            <button id="pattern-tub">
                tub
            </button>
            <button id="pattern-blinker">
                blinker
            </button>
            <button id="pattern-toad">
                toad
            </button>
            <button id="pattern-beacon">
                beacon
            </button>
            <button id="pattern-pulsar">
                pulsar
            </button>
            <button id="pattern-mwss">
                mwss
            </button>
            <button id="pattern-gosperGliderGun">
                gosperGliderGun
            </button>
                <button id="selectionField">
                    Selection field
                </button>
            


        </div>


        <form asp-action="MakeAllCellsDead" method="post">
            <button type="submit" id="clear-all-cells">
                clear all
            </button>
        </form>
        

    </div>


    <div class="game-container" id="game-container">
    @for (int row = 0; row < Rows; row++)
    {
            <div class="rowGrid @row">
        @for (int col = 0; col < Columns; col++)
        {
                    <div id="cell-@row-@col" 
                          data-row="@row" 
                          data-col="@col"
                          class="cell @(Model[row,col]?.IsAlive == true ? "alive": "")"
                          onclick="addPatternTwice(chosenPattern, @row, @col)"
                    >
                            
                    </div>
                   

                    <script>
                        function addPatternTwice(pattern, row, col) {
                            // Call addPattern function once
                            addPattern(pattern, row, col);

                            // Call addPattern function again after a delay (for demonstration purposes)
                            setTimeout(function () {
                                addPattern(pattern, row, col);
                            }, 5); 
                        }
                    </script>
                        
        }
        </div>
    }
    </div>
    </div>
}
else
{
    <div>EMPTY</div>
}

<style>
    .highlighted{
        background: linear-gradient(to bottom, #ffffff, lightblue);
        opacity: 0.5;
    }
    


    .center-container {
        display: flex;
        justify-content: center; /* Center the content horizontally */
        align-items: center; /* Center the content vertically */
        height: 100vh;
    }
        .game-container {
        border: 3px solid white;
        border-radius: 6px;
        
        background-color: black;
        display: grid;
        display: inline-grid;
        gap:1px;
        grid-template-columns: repeat(@Rows, 13px); /* Adjust column width dynamically */
    }

    .rowGrid {
        display: grid;
        gap: 1px;
    }

    .cell {
        height: 15px;
       
        border-radius: 4px;
    }
       
    }
    .cell.hovered{
            background: linear-gradient(to bottom, #ffffff, lightblue); /* Gradient from white to green */
            opacity: 0.1; /* Set opacity to 0.5 to create a trail effect */
    }

    .alive {
        background: linear-gradient(to bottom, #ffffff, white);
        transition: background 0.3s ease;
    }

    .alive.hovered {
            background: linear-gradient(to bottom, #ffffff, lightblue); /* Gradient from white to green */
            opacity: 0.5; /* Set opacity to 0.5 to create a trail effect */
    }

   /* .propColorBlack{
        border: 1px solid green;
    }*/

  




    #loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.5); /* Semi-transparent white background 
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;
    }

        #loading-overlay img {
            width: 12px; /* Adjust the width of the loading image */
            height: 12px; /* Adjust the height of the loading image */
        }



</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="/js/game.js"></script>
